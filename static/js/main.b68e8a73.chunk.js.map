{"version":3,"sources":["components/Contact.js","components/Contacts.js","components/Header.js","components/AddContact.js","components/About.js","components/404.js","App.js","serviceWorker.js","index.js"],"names":["Contact","onShowClick","state","onShow","setState","onDeleteClick","props","deleteClickHandler","this","contact","name","email","phone","className","onClick","style","cursor","float","color","console","log","Component","Contacts","contacts","id","deleteContact","newContacts","filter","map","bind","key","onClickHandler","Header","brand","to","AddContact","onChangeHandler","e","target","value","onSubmitHandler","preventDefault","onSubmit","onChange","type","placeholder","About","App","exact","path","component","Page404","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b68e8a73.chunk.js","sourcesContent":["import React, { Fragment, Component } from \"react\";\r\n\r\nclass Contact extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      onShow: false\r\n    };\r\n  }\r\n\r\n  //normal function cannot access state but arrow function can because it is a custom method\r\n  //2nd solution is bind the method to the current class using this this.method.bind(this)\r\n  onShowClick = () => {\r\n    if (this.state.onShow) {\r\n      this.setState({\r\n        onShow: false\r\n      });\r\n    } else {\r\n      this.setState({\r\n        onShow: true\r\n      });\r\n    }\r\n  };\r\n\r\n  //UPDATE a state in a component from another component\r\n  //The event handler in this component triggers a Function that runs in the parent component\r\n  onDeleteClick = () => {\r\n    this.props.deleteClickHandler();\r\n  };\r\n\r\n  render() {\r\n    const { name, email, phone } = this.props.contact;\r\n    const { onShow } = this.state;\r\n\r\n    return (\r\n      <Fragment>\r\n        <div className=\"card card-body mb-3 \">\r\n          <h3>\r\n            {name}\r\n            <i\r\n              onClick={this.onShowClick}\r\n              className=\"fas fa-sort-down ml-2\"\r\n              style={{ cursor: \"pointer\" }}\r\n            ></i>\r\n\r\n            <i\r\n              onClick={this.onDeleteClick}\r\n              className=\"fas fa-times mt-2 mr-2\"\r\n              style={{ cursor: \"pointer\", float: \"right\", color: \"#fe3939\" }}\r\n            ></i>\r\n            <i\r\n              onClick={function() {\r\n                console.log(\"edit\");\r\n              }}\r\n              className=\"fas fa-edit mt-2 mr-2\"\r\n              style={{ cursor: \"pointer\", float: \"right\", color: \"black\" }}\r\n            ></i>\r\n          </h3>\r\n          {onShow ? (\r\n            <ul className=\"list-group\">\r\n              <li className=\"list-group-item\">{email}</li>\r\n              <li className=\"list-group-item\">{phone}</li>\r\n            </ul>\r\n          ) : null}\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Contact;\r\n","import React, { Component, Fragment } from \"react\";\r\nimport Contact from \"./Contact\";\r\n\r\nclass Contacts extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      contacts: [\r\n        {\r\n          id: 1,\r\n          name: \"Andi Balo\",\r\n          email: \"andibalo213@gmail.com\",\r\n          phone: \"029891292\"\r\n        },\r\n        {\r\n          id: 2,\r\n          name: \"John Doe\",\r\n          email: \"andibalo213@gmail.com\",\r\n          phone: \"029891292\"\r\n        },\r\n        {\r\n          id: 3,\r\n          name: \"Jane Doe\",\r\n          email: \"andibalo213@gmail.com\",\r\n          phone: \"029891292\"\r\n        }\r\n      ]\r\n    };\r\n  }\r\n\r\n  //returning a component/jsx element from a map loop requires it to be put inside of a () instead of {}\r\n  render() {\r\n    const { contacts } = this.state;\r\n\r\n    const deleteContact = id => {\r\n      console.log(id);\r\n\r\n      const newContacts = contacts.filter(contact => {\r\n        return id !== contact.id;\r\n      });\r\n\r\n      this.setState({\r\n        contacts: newContacts\r\n      });\r\n    };\r\n\r\n    return (\r\n      <Fragment>\r\n        <div>\r\n          <h1 className=\"display-3 mb-3\">\r\n            <span className=\"text-primary\">Contact</span> List\r\n          </h1>\r\n          <div>\r\n            {contacts.map(contact => (\r\n              <Contact\r\n                deleteClickHandler={deleteContact.bind(this, contact.id)}\r\n                key={contact.id}\r\n                contact={contact}\r\n              />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Contacts;\r\n","import React, { Fragment } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst onClickHandler = () => {\r\n  console.log(\"test\");\r\n};\r\nconst Header = ({ brand }) => {\r\n  return (\r\n    <Fragment>\r\n      <nav className=\"navbar navbar-expand-sm bg-primary navbar-dark mb-4\">\r\n        <div className=\"container\">\r\n          <Link to=\"/\" className=\"navbar-brand\">\r\n            <i className=\"fas fa-address-book mr-2\"></i>\r\n            {brand}\r\n          </Link>\r\n          <div>\r\n            <ul className=\"navbar-nav mr-auto\">\r\n              <li className=\"nav-item\">\r\n                <Link\r\n                  onClick={onClickHandler}\r\n                  to=\"/\"\r\n                  className=\"nav-link active\"\r\n                >\r\n                  <i className=\"fas fa-home px-2\"></i>\r\n                  Home\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link to=\"/contact/add\" className=\"nav-link \">\r\n                  <i className=\"fas fa-plus px-2\"></i>\r\n                  Add Contact\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link to=\"/about\" className=\"nav-link \">\r\n                  <i className=\"fas fa-question px-2\"></i>\r\n                  About\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { Component, Fragment } from \"react\";\r\n\r\nclass AddContact extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      name: \"\",\r\n      email: \"\",\r\n      phone: \"\"\r\n    };\r\n  }\r\n\r\n  onChangeHandler = e => {\r\n    const { name, value } = e.target;\r\n\r\n    //THE brace is used to access property value of an obj like object[propertname]\r\n    //without the brace it will have an error bcs it suggests it is a property name instead of acccessing value from event obj\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n\r\n    console.log(e.target.value);\r\n  };\r\n\r\n  onSubmitHandler = e => {\r\n    e.preventDefault();\r\n    console.log(this.state);\r\n  };\r\n\r\n  render() {\r\n    const { name, email, phone } = this.state;\r\n\r\n    return (\r\n      <Fragment>\r\n        <h1 className=\"display-3 \">\r\n          <span className=\"text-primary\">Add</span> Contact\r\n        </h1>\r\n        <div className=\"card mb-3 \">\r\n          <div className=\"card-body\">\r\n            <form onSubmit={this.onSubmitHandler}>\r\n              <div className=\"form-group\">\r\n                <label>Name</label>\r\n                <input\r\n                  name=\"name\"\r\n                  onChange={this.onChangeHandler}\r\n                  type=\"text\"\r\n                  className=\"form-control form-control-lg\"\r\n                  placeholder=\"Enter Name\"\r\n                  value={name}\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>Email</label>\r\n                <input\r\n                  name=\"email\"\r\n                  type=\"email\"\r\n                  onChange={this.onChangeHandler}\r\n                  className=\"form-control form-control-lg\"\r\n                  placeholder=\"Enter Email\"\r\n                  value={email}\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label>Phone</label>\r\n                <input\r\n                  name=\"phone\"\r\n                  type=\"text\"\r\n                  onChange={this.onChangeHandler}\r\n                  className=\"form-control form-control-lg\"\r\n                  placeholder=\"Enter Phone\"\r\n                  value={phone}\r\n                />\r\n              </div>\r\n              <input\r\n                type=\"submit\"\r\n                value=\"Add Contact\"\r\n                className=\"btn btn-primary btn-lg btn-block\"\r\n              />\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddContact;\r\n","import React, { Fragment } from \"react\";\r\n\r\nconst About = () => {\r\n  return (\r\n    <Fragment>\r\n      <h1 className=\"display-3 \">\r\n        <span className=\"text-primary\">About</span> This App\r\n      </h1>\r\n      <p>dwadwa</p>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import React, { Fragment } from \"react\";\r\n\r\nconst About = () => {\r\n  return (\r\n    <Fragment>\r\n      <h1>404</h1>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import Contacts from \"./components/Contacts\";\nimport Header from \"./components/Header\";\nimport React from \"react\";\nimport AddContact from \"./components/AddContact\";\nimport About from \"./components/About\";\nimport Page404 from \"./components/404\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Header brand=\"Contact Manager\" />\n        <div className=\"container\">\n          <Switch>\n            <Route exact path=\"/\" component={Contacts} />\n            <Route exact path=\"/contact/add\" component={AddContact} />\n            <Route exact path=\"/about\" component={About} />\n            <Route path=\"*\" component={Page404} />\n          </Switch>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}